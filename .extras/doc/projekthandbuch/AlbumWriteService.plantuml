@startuml Anwendungskern

interface Promise<T>

package @nestjs/common {
  class "@Injectable" as Injectable
  hide Injectable circle
}

package typeorm {
  class Repository<T>
}

package @nestjs/typeorm {
  class "@InjectRepository" as InjectRepository
  hide InjectRepository circle
}

package mail {
  class MailService
}

package album {
  package entity {
    class Album
  }

  package service #DDDDDD {
    class AlbumInvalid
    class TitelExists
    class IsbnExists
    class VersionInvalid
    class VersionOutdated

    class AlbumWriteService << control >> <<@Injectable()>> {
      + async create(album: Album): Promise<string|AlbumInvalid|TitelExists|IsbnExists>
      + async update(id: number, album: Album, version: string): Promise<number|AlbumInvalid|TitelExists|IsbnExists|VersionInvalid|VersionOutdated>
      + async delete(id: number): Promise<boolean>
    }

    AlbumWriteService o--> "1" AlbumValidationService: validationService
    AlbumWriteService o--> "1" AlbumReadService: readService
    AlbumWriteService o--> "1" Repository: @InjectRepository repo
    AlbumWriteService o--> "1" MailService: mailService

    AlbumWriteService .up.> Injectable
    AlbumWriteService .up.> InjectRepository

    AlbumWriteService .up.> Promise
    AlbumWriteService ..> Album
    AlbumWriteService .up.> AlbumInvalid
    AlbumWriteService .up.> TitelExists
    AlbumWriteService .up.> IsbnExists
    AlbumWriteService .up.> VersionInvalid
    AlbumWriteService .up.> VersionOutdated

    AlbumInvalid .up[hidden].> Album
    Album .up[hidden].> Promise
    Album .up[hidden].> Injectable
    Album .up[hidden].> InjectRepository
    TitelExists .up[hidden].> Album
    AlbumValidationService .[hidden].> Repository
    AlbumValidationService .[hidden].> MailService
  }
}

hide empty members

@enduml
