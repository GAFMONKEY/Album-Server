{
	"info": {
		"_postman_id": "9191f3b9-c1bd-48b0-80d3-645b411c5966",
		"name": "REST",
		"description": "REST-Schnittstelle",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31803624"
	},
	"item": [
		{
			"name": "Suche mit ID",
			"item": [
				{
					"name": "Vorhandene ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('ID im Self-Link', () => {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body._links.self.href).to.be.a('string').that.matches(/\\/rest\\/1$/u);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 1 mit If-None-Match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 304', () => {\r",
									"    pm.response.to.have.status(304);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Album ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 1 mit falscher Versionsnummer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('ID im Self-Link', () => {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body._links.self.href).to.be.a('string').that.matches(/\\/rest\\/1$/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Album ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht-vorhandene ID 999999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('ProblemDetails im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message, error, statusCode } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('999999');\r",
									"    pm.expect(error).to.be.equal('Not Found');\r",
									"    pm.expect(statusCode).to.be.equal(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "999999",
									"description": "Album ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Falsche ID xy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "xy",
									"description": "Album ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Ãœber die REST-Schnittstelle nach Alben anhand der ID suchen.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Suche mit Suchkriterien",
			"item": [
				{
					"name": "Alle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: mind. 1 Album und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.is.not.empty;\r",
									"    alben.map(album => album._links.self.href)\r",
									"        .forEach(href => pm.expect(href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teilstring \"nd\" des Interprets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: Interpret enthaelt \"nd\" und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.is.not.empty;\r",
									"    alben.forEach(album => {\r",
									"        const { interpret, _links } = album;\r",
									"        pm.expect(interpret.interpret).to.be.a('string').that.includes('nd');\r",
									"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?interpret=nd",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "interpret",
									"value": "nd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht-vorhandener Teilstring des Interprets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?interpret=xxx",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "interpret",
									"value": "xxx"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EAN 5901234123457",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: EAN und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { ean, _links } = alben[0];\r",
									"    pm.expect(ean).to.be.a('string').that.includes('5901234123457');\r",
									"    pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?ean=5901234123457",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "ean",
									"value": "5901234123457"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Genre POP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: Genre POP und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.is.not.empty;\r",
									"    alben.forEach(album => {\r",
									"        const { genres, _links } = album;\r",
									"        pm.expect(genres).to.be.an('array').that.includes('POP');\r",
									"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?pop=true",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "pop",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Genre ALTERNATIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: Genre ALTERNATIVE und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.is.not.empty;\r",
									"    alben.forEach(album => {\r",
									"        const { genres, _links } = album;\r",
									"        pm.expect(genres).to.be.an('array').that.includes('ALTERNATIVE');\r",
									"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?alternative=true",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "alternative",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Genres POP und ALTERNATIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: Genres POP und ALTERNATIVE sowie Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.is.not.empty;\r",
									"    alben.forEach(album => {\r",
									"        const { genres, _links } = album;\r",
									"        pm.expect(genres).to.be.an('array').that.includes.members(['POP', 'ALTERNATIVE']);\r",
									"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?pop=true&alternative=true",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "pop",
									"value": "true"
								},
								{
									"key": "alternative",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Albumart LIVEALBUM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: Albumart LIVEALBUM und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.is.not.empty;\r",
									"    alben.forEach(album => {\r",
									"        const { art, _links } = album;\r",
									"        pm.expect(art).to.be.equal('LIVEALBUM');\r",
									"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?art=LIVEALBUM",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "art",
									"value": "LIVEALBUM"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rating 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: Rating 1 und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { alben } = body._embedded;\r",
									"    pm.expect(alben).to.be.an('array').that.is.not.empty;\r",
									"    alben.forEach(album => {\r",
									"        const { rating, _links } = album;\r",
									"        pm.expect(rating).to.be.equal(1);\r",
									"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?rating=1",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "rating",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UngÃ¼ltiges Rating 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?rating=9",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "rating",
									"value": "9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht-vorhandene Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?radio=true",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "radio",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Ãœber die REST-Schnittstelle nach Alben mit Suchkriterien suchen.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login als admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit token, expiresIn', () => {\r",
									"    const body = pm.response.json();\r",
									"    console.log(`${JSON.stringify(body)}`);\r",
									"    const { access_token, expires_in, refresh_token, refresh_expires_in } = body;\r",
									"    pm.expect(access_token).to.be.a('string').that.matches(/.+\\..+\\..+/u);\r",
									"    pm.expect(expires_in).to.be.equal(1800);\r",
									"    pm.expect(refresh_token).to.be.a('string').that.matches(/.+\\..+\\..+/u);\r",
									"    pm.expect(refresh_expires_in).to.be.equal(3600);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "p",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh_token",
									"value": "eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjYjI0NTk1Yi04MzAyLTRmODEtYTlmNi04ZTA0MTM0YjJmOWEifQ.eyJleHAiOjE3MTQ0ODQ4OTYsImlhdCI6MTcxNDQ4MTI5NiwianRpIjoiMDc1NzRmMjktNjAyOC00NmUxLWE4NjAtMjZiMzcxMWYxY2QzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9hY21lIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9hY21lIiwic3ViIjoiYjAyODRmZWUtNDFlMC00NGU0LTgyYWEtZTY2ZmEwOTA4YTExIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImFsYnVtLWNsaWVudCIsInNlc3Npb25fc3RhdGUiOiI5Y2RlZjJkMS1mNjEyLTQ0NWQtYjgxNy00YmY4YzE4ODljZDciLCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJzaWQiOiI5Y2RlZjJkMS1mNjEyLTQ0NWQtYjgxNy00YmY4YzE4ODljZDcifQ.ACsROZdl6912NFXO7oXLBWXq1Y-n65qBxfIJ4xLXTpOI_trcrMLhoLfTk0BeDfi_lyqE02F27OGnR8ADm3jO8A",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login mit falschem Passwort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 401', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "FALSCH",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login ohne Benutzerkennung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 401', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Ãœber die REST-Schnittstelle einloggen, um einen JWT zu erhalten"
		},
		{
			"name": "Neuanlegen",
			"item": [
				{
					"name": "Neues Album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test('Location', () => {\r",
									"    const { response } = pm;\r",
									"    const location = response.headers.get('Location');\r",
									"    pm.expect(location).to.match(/\\/rest\\/[1-9]\\d*/u);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded',\r",
									"    },\r",
									"    body: 'username=admin&password=p',\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"0602445706679\",\r\n  \"rating\": 1,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 99.99,\r\n  \"rabatt\": 0.123,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-01-31\",\r\n  \"homepage\": \"https://post.rest\",\r\n  \"genres\": [\"POP\", \"ALTERNATIVE\"],\r\n  \"titel\": \"ABC\",\r\n  \"interpret\": {\r\n    \"interpret\": \"Interpost\",\r\n    \"geburtsdatum\": \"2000-01-01\",\r\n    \"album\": \"20\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neues Album mit bereits existierender EAN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 422', () => {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('EAN');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded',\r",
									"    },\r",
									"    body: 'username=admin&password=p',\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"5901234123457\",\r\n  \"rating\": 1,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 99.9,\r\n  \"rabatt\": 0.1,\r\n  \"lieferbar\": true,\r\n  \"datum\": \"2022-01-31\",\r\n  \"homepage\": \"https://post.ean\",\r\n  \"genres\": [\"POP\", \"ALTERNATIVE\"],\r\n  \"interpret\": {\r\n    \"interpret\": \"Interprepostian\",\r\n    \"geburtsdatum\": \"2024-04-24\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neues Album mit ungÃ¼ltigen Daten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    const props = ['ean', 'rating', 'art', 'preis', 'rabatt', 'lieferbar', 'erscheinungsdatum', 'homepage'];\r",
									"    pm.expect(message).to.be.an('array').that.has.a.lengthOf(props.length);\r",
									"    message.forEach(msg => pm.expect(msg).to.be.a('string').that.includes.oneOf(props));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded',\r",
									"    },\r",
									"    body: 'username=admin&password=p',\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"falsche-EAN\",\r\n  \"rating\": -1,\r\n  \"art\": \"UNSICHTBAR\",\r\n  \"preis\": -1,\r\n  \"rabatt\": 2,\r\n  \"lieferbar\": 3,\r\n  \"erscheinungsdatum\": \"2022-02-30\",\r\n  \"homepage\": \"anyHomepage\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neues Album als gast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test('Location', () => {\r",
									"    const { response } = pm;\r",
									"    const location = response.headers.get('Location');\r",
									"    pm.expect(location).to.match(/\\/rest\\/[1-9]\\d*/u);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded',\r",
									"    },\r",
									"    body: 'username=user&password=p',\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"0196588868122\",\r\n  \"rating\": 1,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 99.99,\r\n  \"rabatt\": 0.123,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-01-31\",\r\n  \"homepage\": \"https://post.rest\",\r\n  \"genres\": [\"POP\", \"ALTERNATIVE\"],\r\n  \"titel\": \"Zeppelin\",\r\n  \"interpret\": {\r\n    \"interpret\": \"Interprepostian\",\r\n    \"geburtsdatum\": \"2024-04-24\",\r\n    \"album\": \"60\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neues Album ohne Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 401', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"5801234123458\",\r\n  \"rating\": 1,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 99.99,\r\n  \"rabatt\": 0.123,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-01-31\",\r\n  \"homepage\": \"https://post.rest\",\r\n  \"genres\": [\"POP\", \"ALTERNATIVE\"],\r\n  \"interpret\": {\r\n    \"interpret\": \"Interprepostian\",\r\n    \"geburtsdatum\": \"2024-04-24\",\r\n    \"album\": \"60\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Ãœber die REST-Schnittstelle neue Alben anlegen",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ã„ndern",
			"item": [
				{
					"name": "Album 30 Ã¤ndern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 204', () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded',\r",
									"    },\r",
									"    body: 'username=admin&password=p',\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"0194399419922\",\r\n  \"rating\": 5,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 3333,\r\n  \"rabatt\": 0.33,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-03-03\",\r\n  \"homepage\": \"https://put.rest\",\r\n  \"genres\": [\"POP\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Album 30 mit falscher Versionsnummer Ã¤ndern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 412', () => {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Versionsnummer');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded',\r",
									"    },\r",
									"    body: 'username=admin&password=p',\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"4053804317252\",\r\n  \"rating\": 5,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 3333,\r\n  \"rabatt\": 0.33,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-03-03\",\r\n  \"homepage\": \"https://put.rest\",\r\n  \"genres\": [\"POP\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Album 30 ohne Versionsnummer Ã¤ndern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 428', () => {\r",
									"    pm.response.to.have.status(428);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const msg = pm.response.text();\r",
									"    pm.expect(msg).to.be.a('string').that.includes('If-Match');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"4053804317252\",\r\n  \"rating\": 5,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 3333,\r\n  \"rabatt\": 0.33,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-03-03\",\r\n  \"homepage\": \"https://put.rest\",\r\n  \"genres\": [\"POP\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Album 30 mit alter Versionsnummer Ã¤ndern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 412', () => {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Versionsnummer');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"-1\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"4053804317252\",\r\n  \"rating\": 5,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 3333,\r\n  \"rabatt\": 0.33,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-03-03\",\r\n  \"homepage\": \"https://put.rest\",\r\n  \"genres\": [\"POP\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht-vorhandenes Album 999999 Ã¤ndern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('999999');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"4053804317252\",\r\n  \"rating\": 5,\r\n  \"art\": \"LIVEALBUM\",\r\n  \"preis\": 3333,\r\n  \"rabatt\": 0.33,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"2022-03-03\",\r\n  \"homepage\": \"https://put.rest\",\r\n  \"genres\": [\"POP\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Album 30 mit ungÃ¼ltigen Daten Ã¤ndern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    const props = ['ean', 'rating', 'art', 'preis', 'rabatt', 'erscheinungsdatum', 'homepage'];\r",
									"    pm.expect(message).to.be.an('array').that.has.a.lengthOf(props.length);\r",
									"    message.forEach(msg => pm.expect(msg).to.be.a('string').that.includes.oneOf(props));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ean\": \"falsche-EAN\",\r\n  \"rating\": -1,\r\n  \"art\": \"UNSICHTBAR\",\r\n  \"preis\": -1,\r\n  \"rabatt\": 2,\r\n  \"lieferbar\": true,\r\n  \"erscheinungsdatum\": \"12345-123-123\",\r\n  \"homepage\": \"anyHomepage\",\r\n  \"genres\": [\"POP\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Ãœber die REST-Schnittstelle vorhandene BÃ¼cher lÃ¶schen",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://localhost:3000/auth/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded',\r",
							"    },\r",
							"    body: 'username=admin&password=p',\r",
							"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LÃ¶schen",
			"item": [
				{
					"name": "Album 50 lÃ¶schen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 204', () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht-vorhandenes Album 999999 lÃ¶schen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Ãœber die REST-Schnittstelle vorhandene Alben lÃ¶schen",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://localhost:3000/auth/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded',\r",
							"    },\r",
							"    body: 'username=admin&password=p',\r",
							"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "inherit"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "rest_url",
			"value": "{{base_url}}/rest",
			"type": "string"
		},
		{
			"key": "login_url",
			"value": "{{base_url}}/auth/login",
			"type": "string"
		},
		{
			"key": "TOKEN",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "TOKEN",
			"value": ""
		}
	]
}